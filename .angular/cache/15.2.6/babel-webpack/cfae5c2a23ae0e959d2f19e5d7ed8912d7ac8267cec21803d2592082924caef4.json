{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nlet UserPageComponent = class UserPageComponent {\n  //check for sort \n  onTableDataChange(event) {\n    this.page = event;\n  }\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.page = 1;\n    this.count = 0;\n    this.tableSize = 4;\n    this.status = true;\n    //getAll comment\n    this.allComment = [];\n    //sort comment\n    this.sortAscendingComment = true; // Indicates whether to sort in ascending order (A-Z)\n    this.sortAscendingCompany = true; // Indicates whether to sort in ascending order (A-Z)\n    this.sortAscendingBrandManager = true; // Indicates whether to sort in ascending order (A-Z)\n  }\n\n  handleClick(event, commentId, status) {\n    // Check if the event has already been handled\n    if (event.defaultPrevented) {\n      return;\n    }\n    // Prevent the event from being handled again\n    event.preventDefault();\n    // Call toggleSwitch()\n    this.toggleSwitch(commentId, status);\n  }\n  // update to sql when web reload \n  UpdateToDatabase() {\n    console.log(\"update to database()\");\n    this.http.put('http://localhost:5000/UpdateComment', this.allComment) //[{},{},{}]\n    .subscribe(response => {\n      console.log(\"PUT : \", response);\n    });\n  }\n  toggleSwitch(commentId, status) {\n    const commentIndex = this.allComment.findIndex(comment => comment.idcomment === commentId); // find the index of the comment with matching comment ID\n    if (commentIndex > -1) {\n      // check if commentIndex is a valid index\n      this.allComment[commentIndex].status = !status; // toggle the status of the comment at the found index\n    }\n\n    console.log(this.allComment);\n  }\n  getAllComment() {\n    this.http.get('http://localhost:5000/getComment').subscribe(response => {\n      this.allComment = response;\n      console.log(this.allComment);\n    });\n  }\n  detectPageRefresh(event) {\n    if (!event || event.type === 'beforeunload') {\n      this.UpdateToDatabase();\n      this.getAllComment();\n    }\n    console.log(\"refress\");\n  }\n  ngOnInit() {\n    this.detectPageRefresh();\n    // update to database when url change\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        // The page URL has changed, call your function here\n        this.UpdateToDatabase();\n        this.getAllComment();\n      }\n    });\n    // get all comment\n    this.getAllComment();\n    console.log(\"oninit\");\n  }\n  sortComment() {\n    if (this.sortAscendingComment) {\n      this.allComment.sort((a, b) => a.comment.charAt(0).localeCompare(b.comment.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    } else {\n      this.allComment.sort((a, b) => b.comment.charAt(0).localeCompare(a.comment.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    }\n    this.sortAscendingComment = !this.sortAscendingComment;\n  }\n  //sort Company\n  sortCompany() {\n    if (this.sortAscendingCompany) {\n      this.allComment.sort((a, b) => a.name.charAt(0).localeCompare(b.name.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    } else {\n      this.allComment.sort((a, b) => b.name.charAt(0).localeCompare(a.name.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    }\n    this.sortAscendingCompany = !this.sortAscendingCompany;\n  }\n  //sort BrandManager\n  sortBrandManager() {\n    if (this.sortAscendingBrandManager) {\n      this.allComment.sort((a, b) => a.brandManager.charAt(0).localeCompare(b.brandManager.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    } else {\n      this.allComment.sort((a, b) => b.brandManager.charAt(0).localeCompare(a.brandManager.charAt(0), undefined, {\n        sensitivity: 'base'\n      }));\n    }\n    this.sortAscendingBrandManager = !this.sortAscendingBrandManager;\n  }\n};\n__decorate([HostListener('window:beforeunload', ['$event'])], UserPageComponent.prototype, \"detectPageRefresh\", null);\nUserPageComponent = __decorate([Component({\n  selector: 'app-user-page',\n  templateUrl: './user-page.component.html',\n  styleUrls: ['./user-page.component.css']\n})], UserPageComponent);\nexport { UserPageComponent };","map":{"version":3,"mappings":"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","names":["Component","HostListener","NavigationEnd","UserPageComponent","onTableDataChange","event","page","constructor","http","router","handleClick","commentId","status","defaultPrevented","preventDefault","toggleSwitch","UpdateToDatabase","console","log","put","allComment","subscribe","response","commentIndex","findIndex","comment","idcomment","getAllComment","get","detectPageRefresh","type","ngOnInit","events","sortComment","sortAscendingComment","sort","a","b","charAt","localeCompare","undefined","sensitivity","sortCompany","sortAscendingCompany","name","sortBrandManager","sortAscendingBrandManager","brandManager","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\sarif\\Desktop\\guardian\\src\\app\\menu_page\\user-page\\user-page.component.ts"],"sourcesContent":["import { Component,OnInit,ChangeDetectorRef,HostListener   } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-page',\r\n  templateUrl: './user-page.component.html',\r\n  styleUrls: ['./user-page.component.css']\r\n})\r\nexport class UserPageComponent implements OnInit{\r\n\r\n  POST:any;\r\n  page:number = 1;\r\n  count:number = 0;\r\n  tableSize :number = 4;\r\n  status:boolean = true;\r\n  //getAll comment\r\n  allComment:any[] = []\r\n  //check for sort \r\n  \r\n  \r\n  onTableDataChange(event : any)\r\n  {\r\n    this.page = event\r\n  }\r\n  constructor(private http: HttpClient,private router:Router) { }\r\n\r\n  handleClick(event: Event, commentId: number, status: boolean): void {\r\n    // Check if the event has already been handled\r\n    if (event.defaultPrevented) {\r\n      return;\r\n    }\r\n  \r\n    // Prevent the event from being handled again\r\n    event.preventDefault();\r\n  \r\n    // Call toggleSwitch()\r\n    this.toggleSwitch(commentId, status);\r\n  }\r\n  \r\n\r\n\r\n\r\n  // update to sql when web reload \r\n  UpdateToDatabase(){\r\n    console.log(\"update to database()\")\r\n    this.http.put('http://localhost:5000/UpdateComment', this.allComment)//[{},{},{}]\r\n        .subscribe((response) => {\r\n          console.log(\"PUT : \",response);\r\n      });\r\n  }\r\n  \r\n\r\n  toggleSwitch(commentId: number, status: boolean): void {\r\n    const commentIndex = this.allComment.findIndex(comment => comment.idcomment === commentId); // find the index of the comment with matching comment ID\r\n    if (commentIndex > -1) { // check if commentIndex is a valid index\r\n      this.allComment[commentIndex].status = !status; // toggle the status of the comment at the found index\r\n    }\r\n    console.log(this.allComment)\r\n\r\n  }\r\n  \r\n  \r\n    \r\n  getAllComment(): void {\r\n\r\n    this.http.get<any[]>('http://localhost:5000/getComment').subscribe(response => {  \r\n      this.allComment = response\r\n      console.log(this.allComment);\r\n    });\r\n  }\r\n\r\n  @HostListener('window:beforeunload', ['$event'])\r\n  detectPageRefresh(event?: Event) {\r\n    if (!event || event.type === 'beforeunload') {\r\n      this.UpdateToDatabase();\r\n      this.getAllComment()\r\n    }\r\n    console.log(\"refress\")\r\n  }\r\n\r\n  ngOnInit():void {\r\n\r\n    this.detectPageRefresh();\r\n\r\n    // update to database when url change\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationEnd) {\r\n        // The page URL has changed, call your function here\r\n        this.UpdateToDatabase();\r\n        this.getAllComment()\r\n      }\r\n    });\r\n    \r\n    // get all comment\r\n    this.getAllComment()\r\n    console.log(\"oninit\")\r\n  }\r\n\r\n\r\n\r\n\r\n  //sort comment\r\n  sortAscendingComment:boolean = true;  // Indicates whether to sort in ascending order (A-Z)\r\n  sortAscendingCompany:boolean = true;  // Indicates whether to sort in ascending order (A-Z)\r\n  sortAscendingBrandManager:boolean = true;  // Indicates whether to sort in ascending order (A-Z)\r\n  sortComment(){\r\n    if(this.sortAscendingComment)\r\n    {\r\n      this.allComment.sort((a, b) => a.comment.charAt(0).localeCompare(b.comment.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    else\r\n    {\r\n      this.allComment.sort((a, b) => b.comment.charAt(0).localeCompare(a.comment.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    this.sortAscendingComment = !this.sortAscendingComment\r\n\r\n  }\r\n  //sort Company\r\n  sortCompany(){\r\n    if(this.sortAscendingCompany)\r\n    {\r\n      this.allComment.sort((a, b) => a.name.charAt(0).localeCompare(b.name.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    else\r\n    {\r\n      this.allComment.sort((a, b) => b.name.charAt(0).localeCompare(a.name.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    this.sortAscendingCompany= !this.sortAscendingCompany\r\n\r\n  }\r\n  \r\n    //sort BrandManager\r\n  sortBrandManager(){\r\n    if(this.sortAscendingBrandManager)\r\n    {\r\n      this.allComment.sort((a, b) => a.brandManager.charAt(0).localeCompare(b.brandManager.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    else\r\n    {\r\n      this.allComment.sort((a, b) => b.brandManager.charAt(0).localeCompare(a.brandManager.charAt(0),undefined, { sensitivity: 'base' }));\r\n    }\r\n    this.sortAscendingBrandManager= !this.sortAscendingBrandManager\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}