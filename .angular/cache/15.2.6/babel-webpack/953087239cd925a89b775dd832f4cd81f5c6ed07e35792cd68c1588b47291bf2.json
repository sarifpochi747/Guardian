{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.endpoint = 'http://localhost:5000';\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.currentUser = {};\n  }\n  // Sign-up\n  signUp(user) {\n    let api = `${this.endpoint}/register-user`;\n    return this.http.post(api, user).pipe(catchError(this.handleError));\n  }\n  // Sign-in\n  signIn(user) {\n    return this.http.post(`${this.endpoint}/signin`, user).subscribe(res => {\n      if (res == false) {\n        return window.alert('Wrong Username or Password');\n      } else {\n        localStorage.setItem('access_token', res.token);\n        this.getUserProfile(res._id).subscribe(res => {\n          this.router.navigate(['/menu']);\n        });\n      }\n    });\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  get isLoggedIn() {\n    let authToken = localStorage.getItem('access_token');\n    return authToken !== null ? true : false;\n  }\n  doLogout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['/']);\n    }\n  }\n  // User profile\n  getUserProfile(id) {\n    let api = `${this.endpoint}/user-profile/${id}`;\n    return this.http.get(api, {\n      headers: this.headers\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  // Error\n  handleError(error) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      // client-side error\n      msg = error.error.message;\n    } else {\n      // server-side error\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","HttpHeaders","AuthService","constructor","http","router","set","signUp","user","api","endpoint","post","pipe","handleError","signIn","subscribe","res","window","alert","localStorage","setItem","token","getUserProfile","_id","navigate","getToken","getItem","isLoggedIn","authToken","doLogout","removeToken","removeItem","id","get","headers","error","msg","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sarif\\Desktop\\guardian\\src\\app\\shared\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { User } from './user';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  endpoint: string = 'http://localhost:5000';\r\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n  currentUser = {};\r\n  constructor(private http: HttpClient, public router: Router) {}\r\n  // Sign-up\r\n  signUp(user: User): Observable<any> {\r\n    let api = `${this.endpoint}/register-user`;\r\n    return this.http.post(api, user).pipe(catchError(this.handleError));\r\n  }\r\n  // Sign-in\r\n  signIn(user: User) {\r\n    return this.http\r\n      .post<any>(`${this.endpoint}/signin`, user)\r\n      .subscribe((res: any) => {\r\n        if(res == false){return window.alert('Wrong Username or Password')}\r\n        else{\r\n          localStorage.setItem('access_token', res.token);\r\n          this.getUserProfile(res._id).subscribe((res) => {\r\n            this.router.navigate(['/menu']);\r\n          });\r\n        }\r\n      });\r\n  }\r\n  getToken() {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n  get isLoggedIn(): boolean {\r\n    let authToken = localStorage.getItem('access_token');\r\n    return authToken !== null ? true : false;\r\n  }\r\n  doLogout() {\r\n    let removeToken = localStorage.removeItem('access_token');\r\n    if (removeToken == null) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n  // User profile\r\n  getUserProfile(id: any): Observable<any> {\r\n    let api = `${this.endpoint}/user-profile/${id}`;\r\n    return this.http.get(api, { headers: this.headers }).pipe(\r\n      map((res) => {\r\n        return res || {};\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  // Error\r\n  handleError(error: HttpErrorResponse) {\r\n    let msg = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // client-side error\r\n      msg = error.error.message;\r\n    } else {\r\n      // server-side error\r\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    return throwError(msg);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}